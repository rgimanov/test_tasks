# -*- coding: utf-8 -*-
"""dependencies.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1re44XAPgZaq_iYqleZywP1O_ql2hUiTx
"""

import sys
file_name = sys.argv[1]
import json
libr = json.load(open(file_name))
libr = libr['libraries']
name_libr = [i['name'] for i in libr]
array_link = [0 for i in name_libr]
for i in range(len(name_libr)):
  array_link[i] = []
for i in range(len(name_libr)):
  for j in libr[i]['dependencies']:
    indx = name_libr.index(j)
    array_link[indx].append(i) 
roots = []
for i in range(len(name_libr)):
  if len(libr[i]['dependencies']) == 0:
    roots.append(i)
adj = array_link[:]

level = [-1] * len(adj) 

def bfs_v_1(s):
    global level
    level[s] = 0
    queue = [s]
    while queue:
        v = queue.pop(0)
        for w in adj[v]: 
            if level[w] < level[v] + 1: 
                queue.append(w) 
                level[w] = level[v] + 1 
for i in roots:
  bfs_v_1(i)  
levels = list(set(level))
levels.sort()
for i in levels:
  for j in range(len(level)):
    if i == level[j]:
      print(name_libr[j])

for i in range(len(name_libr)):
  for j in libr[i]['dependencies']:
    indx = name_libr.index(j)
    array_link[indx].append(i) 
roots = []
for i in range(len(name_libr)):
  if len(libr[i]['dependencies']) == 0:
    roots.append(i)
adj = array_link[:]

level = [-1] * len(adj) 

def bfs_v_1(s):
    global level
    level[s] = 0
    queue = [s]
    while queue:
        v = queue.pop(0)
        for w in adj[v]: 
            if level[w] < level[v] + 1: 
                queue.append(w) 
                level[w] = level[v] + 1 
for i in roots:
  bfs_v_1(i)  
levels = list(set(level))
levels.sort()
for i in levels:
  for j in range(len(level)):
    if i == level[j]:
      print(name_libr[j])

roots = []

roots = []
for i in range(len(name_libr)):
  if len(libr[i]['dependencies']) == 0:
    roots.append(i)
adj = array_link[:]

level = [-1] * len(adj) 

def bfs_v_1(s):
    global level
    level[s] = 0
    queue = [s]
    while queue:
        v = queue.pop(0)
        for w in adj[v]: 
            if level[w] < level[v] + 1: 
                queue.append(w) 
                level[w] = level[v] + 1 
for i in roots:
  bfs_v_1(i)  
levels = list(set(level))
levels.sort()
for i in levels:
  for j in range(len(level)):
    if i == level[j]:
      print(name_libr[j])

roots

adj = array_link[:]

level = [-1] * len(adj) 

def bfs_v_1(s):
    global level
    level[s] = 0
    queue = [s]
    while queue:
        v = queue.pop(0)
        for w in adj[v]: 
            if level[w] < level[v] + 1: 
                queue.append(w) 
                level[w] = level[v] + 1 
for i in roots:
  bfs_v_1(i)  
levels = list(set(level))
levels.sort()
for i in levels:
  for j in range(len(level)):
    if i == level[j]:
      print(name_libr[j])

levels

for i in levels:
  for j in range(len(level)):
    if i == level[j]:
      print(name_libr[j])